import tkinter as tk
from tkinter import messagebox, scrolledtext
from tkinter import ttk
from openpyxl import load_workbook, Workbook
import datetime
import re

# Variables globales
resultados_por_rol = {}
aplicativos = []
perfiles = []
nombre_archivo = "Catálogo de roles_10_02_2025.xlsx"
sheet = None  # Declarar sheet como global

# Crear la ventana principal
root = tk.Tk()
root.title("Búsqueda en Catálogo para Códigos de Cargo")
root.geometry("1200x600")
root.resizable(True, True)

# Crear el Combobox para aplicativos
tk.Label(root, text="Aplicativo:").pack()
combo_aplicativos = ttk.Combobox(root)
combo_aplicativos.pack(fill="x", padx=10, pady=5)

# Campo para seleccionar perfil
tk.Label(root, text="Perfil(es) a buscar:").pack()
entry_palabra = tk.Listbox(root, selectmode=tk.MULTIPLE, height=10)  # Listbox para selección múltiple
entry_palabra.pack(fill="x", padx=10, pady=5)

def guardar_en_excel(flujo, perfiles_seleccionados=None):
    """Función para guardar los resultados en un archivo Excel."""
    aplicativo_buscado = combo_aplicativos.get()
    wb = Workbook()
    ws = wb.active
    ws.title = "Resultados"

    fila_actual = 1  # Fila inicial

    if flujo == "normal":
        # Encabezados para búsqueda normal
        ws.cell(row=fila_actual, column=1).value = "Perfil"
        ws.cell(row=fila_actual, column=2).value = "Rol"
        ws.cell(row=fila_actual, column=3).value = "Códigos Cargos"
        fila_actual += 1

        for perfil in perfiles_seleccionados:
            if perfil in resultados_por_rol:
                for rol, codigos in resultados_por_rol[perfil].items():
                    ws.cell(row=fila_actual, column=1).value = perfil
                    ws.cell(row=fila_actual, column=2).value = rol
                    ws.cell(row=fila_actual, column=3).value = ', '.join(codigos)
                    fila_actual += 1

    elif flujo == "aplicacion":
        # Encabezados para búsqueda por aplicativo
        ws.cell(row=fila_actual, column=1).value = "Rol en Nombre Aplicativo"
        fila_actual += 1

        # Recopilar todos los códigos de cargo únicos por rol
        codigos_por_rol = {}
        
        for rol, codigos in resultados_por_rol.items():
            codigos_unicos = list(set(codigos))  # Eliminar duplicados
            codigos_por_rol[rol] = codigos_unicos

        # Generar encabezados para los códigos de cargo
        max_codigos = max(len(codigos) for codigos in codigos_por_rol.values())
        for i in range(max_codigos):
            ws.cell(row=1, column=i + 2).value = f"Código Cargo {i + 1}"  # Encabezados de códigos de cargo

        # Agregar los datos
        for rol, codigos in codigos_por_rol.items():
            ws.cell(row=fila_actual, column=1).value = rol
            for i, codigo in enumerate(codigos):
                ws.cell(row=fila_actual, column=i + 2).value = codigo  # Colocar códigos de cargo en columnas adyacentes
            fila_actual += 1

    # Crear el nombre del archivo
    fecha_actual = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    nombre_archivo = f"{aplicativo_buscado}_{fecha_actual}.xlsx"
    
    # Guardar el archivo
    wb.save(nombre_archivo)
    messagebox.showinfo("Éxito", f"El reporte ha sido guardado como '{nombre_archivo}'.")
def on_aplicativo_selected(event):
    """Actualizar el Listbox de perfiles al seleccionar un aplicativo."""
    aplicativo_seleccionado = combo_aplicativos.get()

    entry_palabra.delete(0, tk.END)  # Limpiar el Listbox de perfiles

    if aplicativo_seleccionado.upper() == "RACF":
        for perfil in combo_aplicativos.racf_profiles:
            entry_palabra.insert(tk.END, perfil)  # Insertar perfiles de RACF
        entry_palabra.config(state=tk.NORMAL)  # Habilitar el Listbox
        entry_palabra.config(height=10)  # Altura normal del Listbox
    else:
        entry_palabra.insert(tk.END, "Buscar solo por perfil, diferente a RACF")
        entry_palabra.config(state=tk.DISABLED)  # Deshabilitar el Listbox
        entry_palabra.config(height=1)  # Altura mínima del Listbox

combo_aplicativos.bind("<<ComboboxSelected>>", on_aplicativo_selected)

def buscar_datos():
    global resultados_por_rol
    perfiles_seleccionados = [entry_palabra.get(i) for i in entry_palabra.curselection()]
    aplicativo_buscado = combo_aplicativos.get()

    if aplicativo_buscado.upper() == "RACF" and perfiles_seleccionados:
        buscar_datos_normales(aplicativo_buscado, perfiles_seleccionados)
    else:
        messagebox.showerror("Error", "La búsqueda para RACF debe tener perfiles seleccionados.")

def buscar_por_aplicativo():
    global resultados_por_rol
    aplicativo_buscado = combo_aplicativos.get()

    if aplicativo_buscado.upper() != "RACF":
        buscar_roles_sin_perfiles(aplicativo_buscado)
    else:
        messagebox.showerror("Error", "No se puede buscar por aplicativo si es RACF.")

def buscar_roles_sin_perfiles(aplicativo_buscado):
    global resultados_por_rol
    resultados_por_rol.clear()

    try:
        workbook = load_workbook(filename=nombre_archivo)
        sheet = workbook.worksheets[0]
        col_rol = "B"
        col_aplicacion = "E"
        col_codigo_cargo = "J"
        max_row = sheet.max_row

        roles_encontrados = set()

        for i in range(2, max_row + 1):
            aplicativo_actual = str(sheet[f"{col_aplicacion}{i}"].value or "").strip()
            if aplicativo_buscado.lower().strip() == aplicativo_actual.lower().strip():
                rol = str(sheet[f"{col_rol}{i}"].value or "").strip()
                codigo_cargo = sheet[f"{col_codigo_cargo}{i}"].value
                if rol:
                    roles_encontrados.add(rol)
                    if rol not in resultados_por_rol:
                        resultados_por_rol[rol] = set()
                    resultados_por_rol[rol].add(str(codigo_cargo or "").strip())

        resultado_text.config(state=tk.NORMAL)
        resultado_text.delete("1.0", tk.END)

        if resultados_por_rol:
            for rol in resultados_por_rol:
                resultado_text.insert(tk.END, f"Rol: {rol}\nCódigos de Cargo: {', '.join(map(str, resultados_por_rol[rol]))}\n\n")
            btn_generar_reporte.config(state=tk.NORMAL)
            btn_generar_archivo_aplicacion.config(state=tk.NORMAL)  # Habilitar botón para archivo aplicación
        else:
            resultado_text.insert(tk.END, "No se encontraron resultados.")
            btn_generar_reporte.config(state=tk.DISABLED)
            btn_generar_archivo_aplicacion.config(state=tk.DISABLED)  # Deshabilitar botón si no hay resultados

        resultado_text.config(state=tk.DISABLED)

    except Exception as e:
        messagebox.showerror("Error", f"Ocurrió un error al buscar datos: {e}")

def buscar_datos_normales(aplicativo_buscado, perfiles_seleccionados):
    global resultados_por_rol
    resultados_por_rol.clear()

    try:
        workbook = load_workbook(filename=nombre_archivo)
        sheet = workbook.worksheets[0]
        col_rol = "B"
        col_aplicacion = "E"
        col_perfil = "G"
        col_codigo_cargo = "J"
        max_row = sheet.max_row

        for perfil_seleccionado in perfiles_seleccionados:
            roles_encontrados = set()
            resultados_por_rol[perfil_seleccionado] = {}

            for i in range(2, max_row + 1):
                aplicativo_actual = str(sheet[f"{col_aplicacion}{i}"].value or "").strip()
                perfil_actual = str(sheet[f"{col_perfil}{i}"].value or "").strip()
                perfiles_list = [perfil.strip() for perfil in re.split(r'[;,]+', perfil_actual)]

                if aplicativo_buscado.lower().strip() == aplicativo_actual.lower().strip():
                    if perfil_seleccionado.lower().strip() in [perfil.lower().strip() for perfil in perfiles_list]:
                        rol = str(sheet[f"{col_rol}{i}"].value or "").strip()
                        if rol:
                            roles_encontrados.add(rol)

            for i in range(2, max_row + 1):
                rol_actual = str(sheet[f"{col_rol}{i}"].value or "").strip()
                codigo_cargo = sheet[f"{col_codigo_cargo}{i}"].value

                if rol_actual in roles_encontrados:
                    if rol_actual not in resultados_por_rol[perfil_seleccionado]:
                        resultados_por_rol[perfil_seleccionado][rol_actual] = set()
                    resultados_por_rol[perfil_seleccionado][rol_actual].add(str(codigo_cargo or "").strip())

            for rol in resultados_por_rol[perfil_seleccionado]:
                resultados_por_rol[perfil_seleccionado][rol] = sorted(
                    resultados_por_rol[perfil_seleccionado][rol],
                    key=lambda x: int(x) if x.isdigit() else x
                )

        resultado_text.config(state=tk.NORMAL)
        resultado_text.delete("1.0", tk.END)

        if resultados_por_rol:
            for perfil in resultados_por_rol:
                resultado_text.insert(tk.END, f"Perfil: {perfil}\n\n")
                for rol, codigos in resultados_por_rol[perfil].items():
                    resultado_text.insert(tk.END, f"Rol: {rol}\nCódigos de Cargo: {', '.join(map(str, codigos))}\n\n")
            btn_generar_reporte.config(state=tk.NORMAL)
            btn_generar_archivo_aplicacion.config(state=tk.DISABLED)  # Deshabilitar botón para archivo aplicación
        else:
            resultado_text.insert(tk.END, "No se encontraron resultados.")
            btn_generar_reporte.config(state=tk.DISABLED)
            btn_generar_archivo_aplicacion.config(state=tk.DISABLED)  # Deshabilitar botón si no hay resultados

        resultado_text.config(state=tk.DISABLED)

    except Exception as e:
        messagebox.showerror("Error", f"Ocurrió un error al buscar datos: {e}")

# Cargar aplicativos y perfiles al iniciar
def cargar_aplicativos_y_perfiles():
    global sheet  # Hacer sheet global
    try:
        workbook = load_workbook(filename=nombre_archivo)
        sheet = workbook.worksheets[0]  # Inicializar sheet
        max_row = sheet.max_row

        global aplicativos, perfiles
        aplicativos = set()
        perfiles = set()
        perfiles_racf = set()

        for i in range(2, max_row + 1):
            if sheet[f"E{i}"].value:
                palabras_aplicativo = [palabra.strip() for palabra in re.split(r'[;, ]+', sheet[f"E{i}"].value)]
                aplicativos.update(palabras_aplicativo)

            if sheet[f"G{i}"].value:
                palabras_perfil = [palabra.strip() for palabra in re.split(r'[;,]+', sheet[f"G{i}"].value)]
                perfiles.update(palabras_perfil)

                # Relacionar perfiles con RACF
                if "RACF" in re.split(r'[;, ]+', str(sheet[f"E{i}"].value or "").strip()):
                    perfiles_racf.update(palabras_perfil)

        # Configurar los Combobox con aplicativos y perfiles relacionados
        combo_aplicativos['values'] = sorted(aplicativos)
        combo_aplicativos.racf_profiles = sorted(perfiles_racf)  # Guardar perfiles de RACF

    except Exception as e:
        messagebox.showerror("Error", f"Ocurrió un error al cargar datos: {e}")

cargar_aplicativos_y_perfiles()

frame_resultado = tk.Frame(root)
frame_resultado.pack(fill="both", expand=True, padx=10, pady=5)

resultado_text = scrolledtext.ScrolledText(frame_resultado, wrap="word", height=20)  # Altura incrementada
resultado_text.pack(fill="both", expand=True)
resultado_text.config(state=tk.DISABLED, font=("Arial", 10))  # Fuente más pequeña

# Botón para buscar
tk.Button(root, text="Buscar", command=buscar_datos).pack(pady=5)

# Botón para buscar solo por aplicativo
tk.Button(root, text="Buscar por Aplicativo", command=buscar_por_aplicativo).pack(pady=5)

# Botón para generar el reporte de RACF
btn_generar_reporte = tk.Button(root, text="Generar Reporte RACF", command=lambda: guardar_en_excel("normal", [entry_palabra.get(i) for i in entry_palabra.curselection()]), state=tk.DISABLED)
btn_generar_reporte.pack(pady=5)

# Botón para generar el reporte de aplicación
btn_generar_archivo_aplicacion = tk.Button(root, text="Archivo Aplicación", command=lambda: guardar_en_excel("aplicacion"), state=tk.DISABLED)
btn_generar_archivo_aplicacion.pack(pady=5)

# Iniciar la ventana principal
root.mainloop()
